---
- name: Basic setup for all nodes
  hosts: all
  become: yes # execute the commands with elevated privileges
  tasks:
    - name: Set up multiple authorized keys
      ansible.posix.authorized_key:
        user: vagrant
        state: present
        key: "{{item}}"
      with_file:
        - "ssh-keys/lemon.pub"
        - "ssh-keys/madalena.pub"
        - "ssh-keys/laszlo.pub"

    # ----- Section 0: Install basic dependencies.------
    - name: Update apt package index
      apt: update_cache=yes # sudo apt update

    - name: Install basic tools
      apt: # manage packages
        name: ["curl", "wget", "apt-transport-https"]
        state: present # Ensures the package is installed.

    # ----- Section 1: Install & Run Docker ------------
    - name: Install Docker
      apt:
        name: docker.io
        state: present

    - name: Run Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        groups: docker
        append: yes

    # ----- Section 2: Install Kubenetes dependency ----
    - name: Install kubectl
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/v1.28.0/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: "0755"
      when: ansible_os_family != 'Debian'

    - name: Add signing key
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        state: present

    - name: Add kubernetes repository
      ansible.builtin.apt_repository:
        repo: deb https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
        state: present
        filename: kubernetes.list

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    # do "vagrant ssh ctrl" for example
    # and check versions with "apt-cache policy containerd"
    # so that the version to be installed is the same as the one in the apt-cache policy
    - name: Install containerd
      ansible.builtin.apt:
        name: containerd=1.7.24-0ubuntu1~24.04.2
        state: present

    - name: Install runc (container runtime)
      ansible.builtin.apt:
        name: runc=1.1.12-0ubuntu3.1
        state: present

    - name: Install basic kubernetes tools
      ansible.builtin.apt:
        name:
          - kubeadm=1.32.4-1.1
          - kubelet=1.32.4-1.1
          - kubectl=1.32.4-1.1
        state: present

    # configure containerd
    - name: Ensure etc/containerd exits
      ansible.builtin.file:
        path: /etc/containerd
        state: directory

    - name: Get default containerd configuration
      ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml # only created the first time around, after that just line tweaks

    # do "vagrant ssh ctrl" for example
    # and check the content of the file with "cat /etc/containerd/config.toml"
    - name: Disable AppArmor
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*)disable_apparmor' # does not capture indentation
        line: "disable_apparmor = true"
        state: present
        backup: yes # for debug

    - name: Update sandbox image version
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*)sandbox_image' # does not capture indentation
        line: 'sandbox_image = "registry.k8s.io/pause:3.10"'
        state: present
        backup: yes # for debug

    - name: Setup systemd cgroup
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^(\s*)SystemdCgroup' # does not capture indentation
        line: "SystemdCgroup = true"
        state: present
        backup: yes # for debug

    - name: Restart containerd service
      ansible.builtin.service:
        name: containerd
        state: restarted
        enabled: yes

    - name: Auto start kubelet service with system boots
      ansible.builtin.service:
        name: kubelet
        enabled: yes
        state: started

    # ----- Section 3: Kubernetes settings -------------
    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^/#/' /etc/fstab

    - name: Create module folder
      file:
        path: /etc/modules-load.d
        state: directory
        mode: "0755" # authorization for directory

    - name: Copy kernel modules
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        mode: "0644" # authorization for file

    - name: Load module
      modprobe:
        name: br_netfilter
        state: present

    - name: Configure sysctl
      copy:
        dest: /etc/sysctl.d/99-kubernetes.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
      notify: reload sysctl

    - name: Manage /etc/hosts with Jinja2
      ansible.builtin.template:
        src: templates/hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: "0644"

  handlers:
    - name: reload sysctl
      command: sysctl --system
